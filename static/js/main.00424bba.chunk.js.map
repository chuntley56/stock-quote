{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StockChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bid","ask","instrument","popularity","fetch","then","data","json","results","console","log","_this$state","react_default","a","createElement","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMA2DeA,cArDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,IAAK,GACLC,IAAK,GACLC,WAAY,GACZC,WAAY,IAPGX,mFAoBhBY,MAFiB,gDAGhBC,KAAK,SAAAC,GAAS,OAAOA,EAAKC,SAC1BF,KAAK,SAAAG,GAAO,OAAIC,QAAQC,IAAIF,sCAavB,IAAAG,EACoChB,KAAKI,MAAzCC,EADAW,EACAX,IAAKC,EADLU,EACKV,IAAKC,EADVS,EACUT,WAAYC,EADtBQ,EACsBR,WAC7B,OACES,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mBACMd,EAAIY,EAAAC,EAAAC,cAAA,WADV,QAEMb,EAAIW,EAAAC,EAAAC,cAAA,WAFV,eAGaZ,EAAWU,EAAAC,EAAAC,cAAA,WAHxB,eAIaX,WA5CMY,aCKLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAAgBC,SAASC,eAAe,SDmHlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.00424bba.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\n\n// const symbol = 'FB';\n\nclass StockChart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      bid: '',\n      ask: '',\n      instrument: '',\n      popularity: ''\n    };\n  }\n\n  componentDidMount() {\n    // const stockQuoteUrl = 'https://api.robinhood.com/quotes/?symbols=FB';\n    // fetch(stockQuoteUrl)\n    //  .then(data => {return data.json()})\n    //  .then(results => this.setState({ bid: results.results[0].bid_price, ask: results.results[0].ask_price, instrument: results.results[0].instrument.split('instruments/')[1].replace(/\\/$/, \"\")}));\n\n// const popularityUrl = 'https://api.robinhood.com/instruments/popularity/?ids=ebab2398-028d-4939-9f1d-13bf38f81c50';\nconst popularityUrl = 'https://api.robinhood.com/quotes/?symbols=FB';\n// https://robintrack.net/api/stocks/FB/popularity_history\n     fetch(popularityUrl)\n     .then(data => {return data.json()})\n     .then(results => console.log(results))\n\n  }\n\n  //\n  // componentDidUpdate() {\n  //   const popularityUrl = `https://api.robinhood.com/instruments/popularity/?ids=${this.state.instrument}`;\n  //   fetch('https://api.robinhood.com/instruments/popularity/?ids=ebab2398-028d-4939-9f1d-13bf38f81c50')\n  //    .then(data => {return data.json()})\n  //    // .then(results => this.setState({ popularity: results.results[0].num_open_positions}))\n  //         .then(results => console.log(results.results[0].num_open_positions))\n  // }\n\n  render() {\n    const {bid, ask, instrument, popularity} = this.state;\n    return (\n      <div>\n      <div>\n      Bid: {bid}<br />\n      Ask: {ask}<br />\n      Instrument: {instrument}<br />\n      Popularity: {popularity}\n      </div>\n      </div>\n\n    );\n  }\n\n\n}\n\nexport default StockChart;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport StockChart from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<StockChart />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}